name: Deploy to Supabase (TeamSync Dev)

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Cache Homebrew
        id: cache-homebrew
        uses: actions/cache@v3
        with:
          path: |
            /home/linuxbrew/.linuxbrew
            ~/.cache/Homebrew
          key: brew-supabase-cli-${{ runner.os }}-${{ hashFiles('.github/workflows/deploy.yml') }}

      - name: Install Homebrew (if not cached)
        if: steps.cache-homebrew.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl file git
          yes "" | bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.profile

      - name: Setup Homebrew Env
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "HOMEBREW_PREFIX=$HOMEBREW_PREFIX" >> $GITHUB_ENV

      - name: Install Supabase CLI (if not cached)
        if: steps.cache-homebrew.outputs.cache-hit != 'true'
        run: |
          brew install supabase/tap/supabase

      - name: Link Supabase Project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase link --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"

      - name: Validate seed.sql (if present)
        run: |
          if [[ -f supabase/seed.sql ]]; then
            echo "Validating seed.sql..."
            psql "postgresql://postgres:postgres@localhost:54322/postgres" -f supabase/seed.sql --echo-all || {
              echo "Invalid SQL detected in seed.sql";
              exit 1;
            }
          else
            echo "No seed.sql found. Skipping."
          fi

      - name: Check schema creation in migrations (sanity validation)
        run: |
          if grep -q '"[a-zA-Z0-9_]*"\.' supabase/migrations/*.sql && ! grep -q "CREATE SCHEMA" supabase/migrations/*.sql; then
            echo "Custom schema references found but no CREATE SCHEMA statement present. Please ensure schema is created."
            exit 1
          else
            echo "Schema validation passed."
          fi

      - name: Try pushing DB schema
        id: try_push
        continue-on-error: true
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase db push --password "$SUPABASE_DB_PASSWORD"

      - name: Attempt repair and push again
        if: steps.try_push.outcome == 'failure'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Push failed. Trying to repair remote migration history."
          remote_versions=$(supabase migration list | grep -Eo '^[0-9]{14}' || true)
          for version in $remote_versions; do
            match=$(find ./supabase/migrations -type f -name "${version}_*.sql" | wc -l)
            if [ "$match" -eq 0 ]; then
              echo "Repairing: $version => reverted"
              supabase migration repair --status reverted "$version"
              echo "Repairing: $version => applied"
              supabase migration repair --status applied "$version"
            fi
          done
          echo "Syncing local with remote using db pull..."
          supabase db pull
          echo "Retrying push..."
          supabase db push --password "$SUPABASE_DB_PASSWORD"

      - name: Log applied migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Currently applied migrations:"
          supabase migration list | grep '\[applied\]' || echo "None applied"

      - name: Inject Supabase secrets into Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase secrets set \
            NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            SERVICE_ROLE_KEY="${{ secrets.SERVICE_ROLE_KEY }}"

      - name: Deploy Supabase Edge Functions (if any)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase functions deploy --all || echo "No edge functions found"
