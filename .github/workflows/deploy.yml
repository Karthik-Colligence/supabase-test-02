name: Deploy to Supabase (TeamSync Dev)

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Cache Homebrew
        id: cache-homebrew
        uses: actions/cache@v3
        with:
          path: |
            /home/linuxbrew/.linuxbrew
            ~/.cache/Homebrew
          key: brew-supabase-cli-${{ runner.os }}-${{ hashFiles('.github/workflows/deploy.yml') }}

      - name: Install Homebrew (if not cached)
        if: steps.cache-homebrew.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl file git
          yes "" | bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.profile

      - name: Setup Homebrew Env
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "HOMEBREW_PREFIX=$HOMEBREW_PREFIX" >> $GITHUB_ENV

      - name: Install Supabase CLI (if not cached)
        if: steps.cache-homebrew.outputs.cache-hit != 'true'
        run: |
          brew install supabase/tap/supabase

      - name: Link Supabase Project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase link --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"

      - name: Validate migration file naming format
        run: |
          echo "Validating migration file naming format..."
          invalid_files=$(find supabase/migrations -name "*.sql" 2>/dev/null | grep -vE '/[0-9]{14}_[a-zA-Z0-9_]+\.sql$' || true)
          
          if [ -n "$invalid_files" ]; then
            echo "❌ ERROR: Invalid migration file naming format detected:"
            echo "$invalid_files"
            echo "Expected format: YYYYMMDDHHMMSS_description.sql"
            echo "Example: 20240106143022_create_users_table.sql"
            exit 1
          fi
          
          echo "✅ All migration files have valid naming format"

      - name: Check schema creation in migrations (sanity validation)
        run: |
          if grep -q '"[a-zA-Z0-9_]*"\.' supabase/migrations/*.sql && ! grep -q "CREATE SCHEMA" supabase/migrations/*.sql; then
            echo "Custom schema references found but no CREATE SCHEMA statement present. Please ensure schema is created."
            exit 1
          else
            echo "Schema validation passed."
          fi

      - name: Ensure schemas exist before push
        run: |
          mkdir -p supabase/migrations
          touch supabase/migrations/00000000000000_init_schema.sql
          for schema in $(grep -oP '(?<=\").*?(?=\")' supabase/migrations/*.sql | grep -vE 'supabase_migrations|public' | sort -u); do
            echo "Ensuring schema \"$schema\" exists"
            echo "CREATE SCHEMA IF NOT EXISTS \"$schema\";" >> supabase/migrations/00000000000000_init_schema.sql
          done

      - name: Handle deleted migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Checking for deleted migrations..."
          # Specifically handle known deleted migrations
          echo "Marking known deleted migrations as reverted..."
          supabase migration repair --status reverted 20250528121334 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250528121334 already handled"
          supabase migration repair --status reverted 20250606181720 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250606181720 already handled"
          supabase migration repair --status reverted 20250606181721 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250606181721 already handled"
          
          # Handle any other deleted migrations
          remote_versions=$(supabase migration list --password "$SUPABASE_DB_PASSWORD" 2>/dev/null | grep -Eo '^[0-9]{14}' || true)
          for version in $remote_versions; do
            if [ ! -f "./supabase/migrations/${version}_"*.sql ]; then
              echo "Migration $version no longer exists locally - marking as reverted"
              supabase migration repair --status reverted "$version" --password "$SUPABASE_DB_PASSWORD" || true
            fi
          done

      - name: Try pushing DB schema
        id: try_push
        continue-on-error: true
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase db push --include-all --password "$SUPABASE_DB_PASSWORD"

      - name: Attempt repair and push again
        if: steps.try_push.outcome == 'failure'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Push failed. Trying to repair remote migration history."
          # First, specifically handle known problematic migrations
          echo "Attempting to repair known deleted migrations..."
          supabase migration repair --status reverted 20250528121334 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250528121334 already handled"
          supabase migration repair --status reverted 20250606181720 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250606181720 already handled"
          supabase migration repair --status reverted 20250606181721 --password "$SUPABASE_DB_PASSWORD" || echo "Migration 20250606181721 already handled"
          
          remote_versions=$(supabase migration list --password "$SUPABASE_DB_PASSWORD" | grep -Eo '^[0-9]{14}' || true)
          for version in $remote_versions; do
            match=$(find ./supabase/migrations -type f -name "${version}_*.sql" | wc -l)
            if [ "$match" -eq 0 ]; then
              echo "Migration $version exists on remote but not locally - marking as reverted"
              supabase migration repair --status reverted "$version" --password "$SUPABASE_DB_PASSWORD"
            fi
          done
          echo "Retrying push after repairing..."
          supabase db push --include-all --password "$SUPABASE_DB_PASSWORD"

      - name: Log applied migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Currently applied migrations:"
          supabase migration list | grep '\[applied\]' || echo "None applied"

      - name: Inject Supabase secrets into Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase secrets set \
            NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            SERVICE_ROLE_KEY="${{ secrets.SERVICE_ROLE_KEY }}"

      - name: Deploy Supabase Edge Functions (if any)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase functions deploy --all || echo "No edge functions found"
